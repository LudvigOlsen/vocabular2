freq_col = "REL_TF_NRTF",
seed = 5)
dev.off()
rowMeans()
rowMeans
?purrr::pmax
?pmax
tibble::enframe(data.frame("a"=c(1,2,3,4)))
tibble::enframe(data.frame("a"=c(1,2,3,4) %>% .[[1]]))
data.frame("a"=c(1,2,3,4) %>% .[[1]]
tibble::enframe(data.frame("a"=c(1,2,3,4)) %>% .[[1]])
devtools::load_all(".")
vocab_uni <- compare_vocabs(list(
"Depression" = depression_term_counts,
"Control" = control_term_counts,
"Schizo" = schizo_term_counts
))
devtools::load_all(".")
vocab_uni <- compare_vocabs(list(
"Depression" = depression_term_counts,
"Control" = control_term_counts,
"Schizo" = schizo_term_counts
))
devtools::load_all(".")
vocab_uni <- compare_vocabs(list(
"Depression" = depression_term_counts,
"Control" = control_term_counts,
"Schizo" = schizo_term_counts
))
devtools::load_all(".")
sum_rest_populations(df)
df <- tibble::tibble("a" = c(1,1,1),
"b" = c(10,10,10),
"c" = c(100,100,100))
sum_rest_populations(df)
# # Test sum_rest_populations
# # Rows should be 110, 101, 11
expect_equal(sum_rest_populations(df),
tibble::tibble("a" = c(110,110,110),
"b" = c(101,101,101),
"c" = c(11,11,11)))
# # Test sum_rest_populations
# # Rows should be 110, 101, 11
expect_identical(sum_rest_populations(df),
tibble::tibble("a" = c(110,110,110),
"b" = c(101,101,101),
"c" = c(11,11,11)))
df <- tibble::tibble("a" = c(32,11,99),
"b" = c(-100,22,33),
"c" = c(44,-22,47))
df
# # Test sum_rest_populations
# # Rows should be 110, 101, 11
expect_identical(max_rest_populations(df),
tibble::tibble("a" = c(44,22,47),
"b" = c(44,22,99),
"c" = c(32,22,99)))
max_rest_populations(df)
# # Test sum_rest_populations
# # Rows should be 110, 101, 11
expect_identical(max_rest_populations(df),
tibble::tibble("a" = c(44,22,47),
"b" = c(44,11,99),
"c" = c(32,22,99)))
devtools::load_all(".")
vocab_uni <- compare_vocabs(list(
"Depression" = depression_term_counts,
"Control" = control_term_counts,
"Schizo" = schizo_term_counts
))
doc_stats_depression <- get_doc_stats(vocab_uni, "Depression", remove_zero_counts = TRUE)
doc_stats_depression
metric_correlations <- cor(base_deselect(doc_stats_collected, c("Doc","Word","Count")))
metric_correlations
doc_stats_collected <- dplyr::bind_rows(doc_stats_depression,
doc_stats_control,
doc_stats_schizo)
metric_correlations <- cor(base_deselect(doc_stats_collected, c("Doc","Word","Count")))
metric_correlations
devtools::load_all(".")
vocab_uni <- compare_vocabs(list(
"Depression" = depression_term_counts,
"Control" = control_term_counts,
"Schizo" = schizo_term_counts
))
doc_stats_depression <- get_doc_stats(vocab_uni, "Depression", remove_zero_counts = TRUE)
doc_stats_control <- get_doc_stats(vocab_uni, "Control", remove_zero_counts = TRUE)
doc_stats_schizo <- get_doc_stats(vocab_uni, "Schizo", remove_zero_counts = TRUE)
doc_stats_collected <- dplyr::bind_rows(doc_stats_depression,
doc_stats_control,
doc_stats_schizo)
doc_stats_collected
metric_correlations <- cor(base_deselect(doc_stats_collected, c("Doc","Word","Count")))
metric_correlations
metric_rank_correlations <- cor(base_deselect(doc_stats_collected, c("Doc","Word","Count")), method="spearman")
metric_rank_correlations
beta_val_correlations <- function(docs){
betas <- unique(runif(200, 0.0, 5.0))
doc_names <- names(docs)
plyr::ldply(betas, .parallel=TRUE, function(be){
comp <- compare_vocabs(docs, rel_tf_nrtf_beta = be)
comp_long <- plyr::ldply(doc_names, function(dn){
get_doc_stats(comp, dn, remove_zero_counts = TRUE) %>%
base_select(c("TF_RTF", "TF_NRTF", "TF_MRTF", "REL_TF_NRTF", "REL_TF_MRTF", "TF_IRF"))
})
pearson_correlation <- dplyr::as_tibble(cor(comp_long, method = "pearson"), rownames = "By") %>%
dplyr::mutate("Method" = "pearson")
kendall_correlation <- dplyr::as_tibble(cor(comp_long, method = "pearson"), rownames = "By") %>%
dplyr::mutate("Method" = "kendall")
spearman_correlation <- dplyr::as_tibble(cor(comp_long, method = "spearman"), rownames = "By") %>%
dplyr::mutate("Method" = "spearman")
dplyr::bind_rows(pearson_correlation,
kendall_correlation,
spearman_correlation) %>%
dplyr::mutate(beta = be)
})
}
devtools::load_all(".")
normalize(runif(10))
set_seed_for_R_compatibility(1)
freqs <- tibble::tibble(
"C1" = normalize(runif(10)),
"C2" = normalize(runif(10)),
"C3" = normalize(runif(10))
)
freqs
norm_rest <- sum_rest_populations(freqs) / (ncol(freqs)-1)
norm_rest
sum_rest_populations(freqs)
norm_rest <- sum_rest_populations(freqs) / (ncol(freqs)-1)
set_seed_for_R_compatibility(1)
freqs <- tibble::tibble(
"C1" = normalize(runif(10)),
"C2" = normalize(runif(10)),
"C3" = normalize(runif(10))
)
norm_rest <- sum_rest_populations(freqs) / (ncol(freqs)-1)
tf_nrtf <- freqs - norm_rest
# This should have been from the counts, but doesn't matter
# for the test (right?)
epsilons <- sum_rest_populations(freqs) %>%
dplyr::summarise_all(.f = list(function(x) {
1 / sum(x)
}))
calculate_relative_score <- function(freqs,
difference = tf_nrtf,
population = norm_rest,
epsilons = epsilons,
log_denominator = TRUE,
beta = 1)
devtools::load_all(".")
rel_tf_nrtf <- calculate_relative_score(freqs,
difference = tf_nrtf,
population = norm_rest,
epsilons = epsilons,
log_denominator = TRUE,
beta = 1)
rel_tf_nrtf <- calculate_relative_score(freqs,
difference = tf_nrtf,
population = norm_rest,
epsilons = epsilons,
log_denominator = TRUE,
beta = 1)
rel_tf_nrtf <- calculate_relative_score(freqs,
difference = tf_nrtf,
population = norm_rest,
epsilons = epsilons,
log_denominator = TRUE,
beta = 1)
calculate_relative_score <- NULL
devtools::load_all(".")
rel_tf_nrtf <- calculate_relative_score(freqs,
difference = tf_nrtf,
population = norm_rest,
epsilons = epsilons,
log_denominator = TRUE,
beta = 1)
rel_tf_nrtf
freqs[freqs > 0.2 && freqs < 0.4] <- 0
freqs
freqs[freqs > 0.2 & freqs < 0.4] <- 0
freqs
freqs[freqs > 0.15 & freqs < 0.3] <- 0
freqs
set_seed_for_R_compatibility(1)
freqs <- tibble::tibble(
"C1" = normalize(runif(10)),
"C2" = normalize(runif(10)),
"C3" = normalize(runif(10))
)
freqs[freqs > 0.15 & freqs < 0.3] <- 0
freqs
norm_rest <- sum_rest_populations(freqs) / (ncol(freqs)-1)
tf_nrtf <- freqs - norm_rest
norm_rest
tf_nrtf
# This should have been from the counts, but doesn't matter
# for the test (right?)
epsilons <- sum_rest_populations(freqs) %>%
dplyr::summarise_all(.f = list(function(x) {
1 / sum(x)
}))
rel_tf_nrtf <- calculate_relative_score(freqs,
difference = tf_nrtf,
population = norm_rest,
epsilons = epsilons,
log_denominator = TRUE,
beta = 1)
rel_tf_nrtf
max_rest <- max_rest_populations(freqs)
tf_mrtf <- freqs - max_rest
tf_mrtf
max_rest
rel_tf_mrtf <- calculate_relative_score(
freqs = freqs,
difference = tf_mrtf,
population = max_rest,
epsilons = epsilons,
log_denominator = TRUE,
beta = 1)
rel_tf_mrtf
devtools::load_all(".")
rel_tf_mrtf <- calculate_relative_score(
freqs = freqs,
difference = tf_mrtf,
population = max_rest,
epsilons = epsilons,
log_denominator = TRUE,
beta = 1)
rel_tf_mrtf
freqs
set_seed_for_R_compatibility(1)
freqs <- tibble::tibble(
"C1" = normalize(runif(10)),
"C2" = normalize(runif(10)),
"C3" = normalize(runif(10))
)
freqs[freqs > 0.15 & freqs < 0.370] <- 0
freqs
freqs[freqs > 0.036 & freqs < 0.04] <- 0
freqs
norm_rest <- sum_rest_populations(freqs) / (ncol(freqs)-1)
norm_rest
tf_nrtf <- freqs - norm_rest
max_rest <- max_rest_populations(freqs)
tf_mrtf <- freqs - max_rest
tf_nrtf
max_rest
tf_mrtf <- freqs - max_rest
tf_mrtf
# This should have been from the counts, but doesn't matter
# for the test (right?)
epsilons <- sum_rest_populations(freqs) %>%
dplyr::summarise_all(.f = list(function(x) {
1 / sum(x)
}))
rel_tf_nrtf <- calculate_relative_score(
freqs = freqs,
difference = tf_nrtf,
population = norm_rest,
epsilons = epsilons,
log_denominator = TRUE,
beta = 1)
rel_tf_nrtf
rel_tf_mrtf <- calculate_relative_score(
freqs = freqs,
difference = tf_mrtf,
population = max_rest,
epsilons = epsilons,
log_denominator = TRUE,
beta = 1)
rel_tf_mrtf
devtools::load_all(".")
vocab_uni <- compare_vocabs(list(
"Depression" = depression_term_counts,
"Control" = control_term_counts,
"Schizo" = schizo_term_counts
))
doc_stats_depression <- get_doc_stats(vocab_uni, "Depression", remove_zero_counts = TRUE)
doc_stats_control <- get_doc_stats(vocab_uni, "Control", remove_zero_counts = TRUE)
doc_stats_schizo <- get_doc_stats(vocab_uni, "Schizo", remove_zero_counts = TRUE)
doc_stats_collected <- dplyr::bind_rows(doc_stats_depression,
doc_stats_control,
doc_stats_schizo)
doc_stats_collected
metric_correlations <- cor(base_deselect(doc_stats_collected, c("Doc","Word","Count")))
metric_correlations
devtools::load_all(".")
vocab_uni <- compare_vocabs(list(
"Depression" = depression_term_counts,
"Control" = control_term_counts,
"Schizo" = schizo_term_counts
))
devtools::load_all(".")
vocab_uni <- compare_vocabs(list(
"Depression" = depression_term_counts,
"Control" = control_term_counts,
"Schizo" = schizo_term_counts
))
vocab_uni
devtools::load_all(".")
vocab_uni <- compare_vocabs(list(
"Depression" = depression_term_counts,
"Control" = control_term_counts,
"Schizo" = schizo_term_counts
))
doc_stats_depression <- get_doc_stats(vocab_uni, "Depression", remove_zero_counts = TRUE)
doc_stats_control <- get_doc_stats(vocab_uni, "Control", remove_zero_counts = TRUE)
doc_stats_schizo <- get_doc_stats(vocab_uni, "Schizo", remove_zero_counts = TRUE)
doc_stats_collected <- dplyr::bind_rows(doc_stats_depression,
doc_stats_control,
doc_stats_schizo)
metric_correlations <- cor(base_deselect(doc_stats_collected, c("Doc","Word","Count")))
metric_correlations
metric_rank_correlations <- cor(base_deselect(doc_stats_collected, c("Doc","Word","Count")), method="spearman")
metric_rank_correlations
beta_val_correlations <- function(docs){
betas <- unique(runif(200, 0.0, 5.0))
doc_names <- names(docs)
plyr::ldply(betas, .parallel=TRUE, function(be){
comp <- compare_vocabs(docs, rel_tf_nrtf_beta = be)
comp_long <- plyr::ldply(doc_names, function(dn){
get_doc_stats(comp, dn, remove_zero_counts = TRUE) %>%
base_select(c("TF_RTF", "TF_NRTF", "TF_MRTF", "REL_TF_NRTF", "REL_TF_MRTF", "TF_IRF"))
})
pearson_correlation <- dplyr::as_tibble(cor(comp_long, method = "pearson"), rownames = "By") %>%
dplyr::mutate("Method" = "pearson")
kendall_correlation <- dplyr::as_tibble(cor(comp_long, method = "pearson"), rownames = "By") %>%
dplyr::mutate("Method" = "kendall")
spearman_correlation <- dplyr::as_tibble(cor(comp_long, method = "spearman"), rownames = "By") %>%
dplyr::mutate("Method" = "spearman")
dplyr::bind_rows(pearson_correlation,
kendall_correlation,
spearman_correlation) %>%
dplyr::mutate(beta = be)
})
}
beta_value_corrs <- beta_val_correlations(list(
"Depression" = depression_term_counts,
"Control" = control_term_counts,
"Schizo" = schizo_term_counts
)) %>% dplyr::as_tibble()
rel_tf_mrtf
beta_value_corrs
betas_long <- beta_value_corrs %>%
tidyr::gather(key="Metric", value="Correlation", 2:6) %>%
dplyr::filter(By != Metric,
Method != "kendall",
Metric == "REL_TF_NRTF") %>%
base_rename(before="beta",after = "Beta")
betas_long
betas_long <- beta_value_corrs %>%
tidyr::gather(key="Metric", value="Correlation", 2:7) %>%
dplyr::filter(By != Metric,
Method != "kendall",
Metric == "REL_TF_NRTF") %>%
base_rename(before="beta",after = "Beta")
betas_long
betas_long %>% ggplot(aes(x = Beta, y = Correlation)) +
geom_line() +
facet_wrap(Metric + By ~ Method, ncol = 2) +
theme_light()
betas_long %>% ggplot(aes(x = Beta, y = Correlation)) +
geom_line() +
facet_wrap(Metric + By ~ Method) +
theme_light()
betas_long %>% ggplot(aes(x = Beta, y = Correlation)) +
geom_line() +
facet_wrap(Metric + By ~ Method, , ncol = 5) +
theme_light()
betas_long %>% ggplot(aes(x = Beta, y = Correlation)) +
geom_line() +
facet_wrap(Method ~ Metric + By, , ncol = 5) +
theme_light()
betas_long <- beta_value_corrs %>%
tidyr::gather(key="Metric", value="Correlation", 2:7) %>%
dplyr::filter(By != Metric,
Method != "kendall") %>%
base_rename(before="beta",after = "Beta")
betas_long %>%
dplyr::filter(Metric == "REL_TF_MRTF") %>%
ggplot(aes(x = Beta, y = Correlation)) +
geom_line() +
facet_wrap(Method ~ Metric + By, ncol = 5) +
theme_light()
doc_stats_collected_long <- doc_stats_collected %>%
dplyr::select(-c(`In Docs`, idf, Count, Freq, WeightedFreq)) %>%
tidyr::gather(key="Metric", value="Score", 3:15) %>%
dplyr::arrange(Doc, Metric, desc(Score)) %>%
dplyr::group_by(Doc, Metric) %>%
dplyr::mutate(ScoreMinMax = minMaxScaler(Score),
Rank = 1:dplyr::n())
doc_stats_collected_long <- doc_stats_collected %>%
dplyr::select(-c(`In Docs`, idf, Count, Freq)) %>%
tidyr::gather(key="Metric", value="Score", 3:15) %>%
dplyr::arrange(Doc, Metric, desc(Score)) %>%
dplyr::group_by(Doc, Metric) %>%
dplyr::mutate(ScoreMinMax = minMaxScaler(Score),
Rank = 1:dplyr::n())
doc_stats_collected %>%
dplyr::select(-c(`In Docs`, idf, Count, Freq))
doc_stats_collected_long <- doc_stats_collected %>%
dplyr::select(-c(`In Docs`, idf, Count, Freq)) %>%
tidyr::gather(key="Metric", value="Score", 3:11) %>%
dplyr::arrange(Doc, Metric, desc(Score)) %>%
dplyr::group_by(Doc, Metric) %>%
dplyr::mutate(ScoreMinMax = minMaxScaler(Score),
Rank = 1:dplyr::n())
doc_stats_collected_long
doc_stats_collected_long %>%
filter(Metric != "IRF") %>%
ggplot(aes(x = Rank, y=ScoreMinMax, color = Metric)) +
geom_line() +
facet_wrap(~Doc) +
theme_light()
doc_stats_collected_long %>%
filter(Metric != "IRF",
str_detect(Metric, "_weighted", negate=TRUE)) %>%
dplyr::group_by(Doc, Metric) %>%
dplyr::mutate(RankMinMax = minMaxScaler(Rank)) %>%
dplyr::ungroup() %>%
# dplyr::mutate(metric_group = dplyr::case_when(
#                 stringr::str_detect(Metric, "wtf_") ~ "wtf",
#                 stringr::str_detect(Metric, "tf_") ~ "tf",
#                 TRUE ~ "rank"
#               )) %>%
ggplot(aes(x = RankMinMax, y = ScoreMinMax, color = Metric)) +
geom_line() +
facet_wrap(Doc~.) +
theme_light() +
scale_color_brewer(palette = "Dark2") +
# scale_color_manual(values=metric_colors) +
labs(x = "Rank MinMaxScaled", y = "Score MinMaxScaled")
# DEPRESSION
most_unique_depression_mrtf <- doc_stats_depression %>%
dplyr::arrange(dplyr::desc(TF_MRTF)) %>%
head(10) %>%
mutate_if(is.numeric, list(~round(., 5)))
most_unique_depression_mrtf
most_unique_depression_nrtf
# CONTROL
most_unique_control_mrtf <- doc_stats_control %>%
dplyr::arrange(dplyr::desc(TF_MRTF)) %>%
head(10) %>%
mutate_if(is.numeric, list(~round(., 5)))
most_unique_control_mrtf
# DEPRESSION
most_unique_depression_rel_tf_mrtf <- doc_stats_depression %>%
dplyr::arrange(dplyr::desc(REL_TF_MRTF)) %>%
head(10) %>%
mutate_if(is.numeric, list(~round(., 5)))
most_unique_depression_rel_tf_mrtf
# SCHIZO
most_unique_schizo_rel_tf_mrtf <- doc_stats_schizo %>%
dplyr::arrange(dplyr::desc(REL_TF_MRTF)) %>%
head(10) %>%
mutate_if(is.numeric, list(~round(., 5)))
most_unique_schizo_rel_tf_mrtf
doc_stats_control %>%
dplyr::arrange(dplyr::desc(RANK_ENS)) %>%
head(10) %>%
mutate_if(is.numeric, list(~round(., 5)))
doc_stats_schizo %>%
dplyr::arrange(dplyr::desc(RANK_ENS)) %>%
head(10) %>%
mutate_if(is.numeric, list(~round(., 5)))
library(vocabular2)
library(vocabular2)
library(tm)
library(tidyverse)
txt_1 <- "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec at tincidunt ligula. Suspendisse sed dolor eu libero ultrices dignissim. Sed eget est magna. Quisque molestie a enim ut tristique. Vivamus molestie vehicula augue in maximus. Integer imperdiet ligula at condimentum luctus. Integer facilisis id ex eu dapibus. Quisque maximus ex arcu, quis auctor nisl rhoncus quis. Nulla ultrices libero a ultrices tincidunt. Donec gravida viverra odio, quis posuere est pellentesque quis."
txt_2 <- " Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer pulvinar nibh justo, vel vestibulum velit vulputate a. Vestibulum urna lorem, dapibus at vulputate porttitor, eleifend a turpis. Praesent ultrices quam vitae sollicitudin gravida. Donec eu tincidunt orci. Aliquam placerat ligula at lobortis viverra. Aenean sed ligula tincidunt, volutpat dui id, gravida lacus. Praesent mattis, nibh eu convallis sagittis, tortor erat pretium nulla, nec ullamcorper nisl lorem in arcu. Praesent convallis imperdiet libero, aliquet hendrerit augue gravida eu. Fusce tristique risus quam, vel tincidunt tortor sagittis eu."
count_terms <- function(t){
docs <- Corpus(VectorSource(t))
# do things like removing stopwords, lemmatization, etc.
docs <- tm_map(docs, removeWords, stopwords("english"))
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m), decreasing=TRUE)
d <- tibble::tibble(Word = names(v), Count=v)
d
}
txt_1_tc <- count_terms(txt_1)
txt_2_tc <- count_terms(txt_2)
scores <- compare_vocabs(tc_dfs = list("txt_1" = txt_1_tc,
"txt_2" = txt_2_tc))
devtools::load_all(".")
scores <- compare_vocabs(tc_dfs = list("txt_1" = txt_1_tc,
"txt_2" = txt_2_tc))
library(vocabular2)
library(tm)
library(tidyverse)
txt_1 <- "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec at tincidunt ligula. Suspendisse sed dolor eu libero ultrices dignissim. Sed eget est magna. Quisque molestie a enim ut tristique. Vivamus molestie vehicula augue in maximus. Integer imperdiet ligula at condimentum luctus. Integer facilisis id ex eu dapibus. Quisque maximus ex arcu, quis auctor nisl rhoncus quis. Nulla ultrices libero a ultrices tincidunt. Donec gravida viverra odio, quis posuere est pellentesque quis."
txt_2 <- " Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer pulvinar nibh justo, vel vestibulum velit vulputate a. Vestibulum urna lorem, dapibus at vulputate porttitor, eleifend a turpis. Praesent ultrices quam vitae sollicitudin gravida. Donec eu tincidunt orci. Aliquam placerat ligula at lobortis viverra. Aenean sed ligula tincidunt, volutpat dui id, gravida lacus. Praesent mattis, nibh eu convallis sagittis, tortor erat pretium nulla, nec ullamcorper nisl lorem in arcu. Praesent convallis imperdiet libero, aliquet hendrerit augue gravida eu. Fusce tristique risus quam, vel tincidunt tortor sagittis eu."
# Create a term-count tibble
count_terms <- function(t){
docs <- Corpus(VectorSource(t))
# do things like removing stopwords, lemmatization, etc.
docs <- tm_map(docs, removeWords, stopwords("english"))
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m), decreasing=TRUE)
d <- tibble::tibble(Word = names(v), Count=v)
d
}
txt_1_tc <- count_terms(txt_1)
txt_2_tc <- count_terms(txt_2)
scores <- compare_vocabs(tc_dfs = list("txt_1" = txt_1_tc,
"txt_2" = txt_2_tc))
devtools::load_all(".")
library(vocabular2)
get_doc_metrics(scores, "txt_1")
